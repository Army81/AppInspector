/*
 * File: app/controller/Store.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AI.controller.Store', {
    extend: 'Ext.app.Controller',

    requires: [
        'AI.util.Store'
    ],

    init: function(application) {
        this.control({
            'gridpanel#StoreList' : {
                'itemclick'   : this.onStoreGridSelection
            },

            'gridpanel#RecordList' : {
                'itemclick'   : this.onRecordGridSelection
            },

            'button#RefreshStores' : {
                'click' : this.onRefreshStoresClick
            }
        });
    },

    onStoreGridActivate: function(panel) {
        var grid = panel.down('#StoreList'),
            gridStore = grid.getStore();

        gridStore.removeAll();

        grid.setLoading('Loading stores...');

        AI.util.InspectedWindow.eval(
            AI.util.Store.getStores,
            null,
            function (stores) {
                Ext.each(stores, function (store) {
                    var model = Ext.create('AI.model.Store', store);

                    gridStore.add(model);
                });

                grid.setLoading(false);
            }
        );
    },

    onStoreGridSelection: function(storeGrid, record, item, index, e, eOpts) {
        var parent = Ext.ComponentQuery.query('#StoresPanel')[0],
            grid = parent.down('#RecordList'),
            store = grid.getStore(),
            propertyGrid = parent.down('#RecordDetail');

        store.removeAll();
        propertyGrid.setSource({});

        grid.setLoading('Loading records...');

        AI.util.InspectedWindow.eval(
            AI.util.Store.getRecords,
            record.get('id'),
            function (records, isException) {
                Ext.each(records, function (record) {
                    var model = Ext.create('AI.model.Record', record);

                    store.add(model);
                });

                grid.setLoading(false);
            }
        );
    },

    onRecordGridSelection: function(grid, record, item, index, e, eOpts) {
        var parent = Ext.ComponentQuery.query('#StoresPanel')[0],
            propertyGrid = parent.down('#RecordDetail');

        propertyGrid.setSource(record.raw.modelData);
    },

    onRefreshStoresClick: function(btn) {
        var view = btn.up('#StoresPanel');

        this.onStoreGridActivate(view);
    }

});
